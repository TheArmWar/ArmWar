/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_ARMWAR_ARMWAR_PB_H_INCLUDED
#define PB_ARMWAR_ARMWAR_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* *
 A list of commands that can be sent to the arm. */
typedef enum _armwar_Command {
    armwar_Command_UP = 0,
    armwar_Command_DOWN = 1,
    armwar_Command_LEFT = 2,
    armwar_Command_RIGHT = 3,
    armwar_Command_FORWARD = 4,
    armwar_Command_BACKWARD = 5,
    armwar_Command_ROTATE_CW = 6,
    armwar_Command_ROTATE_CCW = 7,
    armwar_Command_GRAB = 8,
    armwar_Command_RELEASE = 9,
    armwar_Command_SET = 10,
    armwar_Command_RESET = 11,
    armwar_Command_STOP = 12
} armwar_Command;

/* Struct definitions */
/* * A message containing the response to a command. */
typedef struct _armwar_CommandResponse {
    bool success;
    pb_callback_t message;
} armwar_CommandResponse;

/* *
 A message containing the current state of the arm.
 Used for debugging and visualization. */
typedef struct _armwar_ArmState {
    float x;
    float y;
    float z;
    float roll;
    bool is_grabbing;
} armwar_ArmState;

/* *
 A message to check the availability of the arm. */
typedef struct _armwar_ArmAvailability {
    bool available;
    bool has_state;
    armwar_ArmState state;
} armwar_ArmAvailability;

/* *
 A message to connect to the arm.
 To prevent multiple clients from connecting to the arm at the same time,
 the arm will then only accept commands from the current client. */
typedef struct _armwar_Connect {
    bool connect;
    bool has_timeout;
    int32_t timeout;
} armwar_Connect;

/* *
 An explicit disconnect message.
 This is not necessary, as the arm will automatically disconnect after a
 certain amount of time without receiving commands. However, it is useful
 to quickly free up the arm for other clients. */
typedef struct _armwar_Disconnect {
    bool disconnect;
} armwar_Disconnect;

/* *
 A message containing a single action and its duration. */
typedef struct _armwar_TimedCommand {
    armwar_Command command;
    int32_t duration;
} armwar_TimedCommand;

/* *
 A message containing a sequence of actions and their durations. */
typedef struct _armwar_TimedCommandSequence {
    pb_callback_t command;
} armwar_TimedCommandSequence;

/* A message containing a single action and whether to start or stop it. */
typedef struct _armwar_StatedCommand {
    armwar_Command command;
    bool start;
} armwar_StatedCommand;

/* *
 A message containing a single action and its span. */
typedef struct _armwar_SpannedCommand {
    armwar_Command command;
    float span;
} armwar_SpannedCommand;

/* *
 A message containing a sequence of actions and their spans. */
typedef struct _armwar_SpannedCommandSequence {
    pb_callback_t command;
} armwar_SpannedCommandSequence;

typedef struct _armwar_ArmCommand {
    bool has_timed_command;
    armwar_TimedCommand timed_command;
    bool has_timed_sequence;
    armwar_TimedCommandSequence timed_sequence;
    bool has_spanned_command;
    armwar_SpannedCommand spanned_command;
    bool has_spanned_sequence;
    armwar_SpannedCommandSequence spanned_sequence;
    bool has_stated_command;
    armwar_StatedCommand stated_command;
} armwar_ArmCommand;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _armwar_Command_MIN armwar_Command_UP
#define _armwar_Command_MAX armwar_Command_STOP
#define _armwar_Command_ARRAYSIZE ((armwar_Command)(armwar_Command_STOP+1))






#define armwar_TimedCommand_command_ENUMTYPE armwar_Command


#define armwar_StatedCommand_command_ENUMTYPE armwar_Command

#define armwar_SpannedCommand_command_ENUMTYPE armwar_Command




/* Initializer values for message structs */
#define armwar_CommandResponse_init_default      {0, {{NULL}, NULL}}
#define armwar_ArmState_init_default             {0, 0, 0, 0, 0}
#define armwar_ArmAvailability_init_default      {0, false, armwar_ArmState_init_default}
#define armwar_Connect_init_default              {0, false, 0}
#define armwar_Disconnect_init_default           {0}
#define armwar_TimedCommand_init_default         {_armwar_Command_MIN, 0}
#define armwar_TimedCommandSequence_init_default {{{NULL}, NULL}}
#define armwar_StatedCommand_init_default        {_armwar_Command_MIN, 0}
#define armwar_SpannedCommand_init_default       {_armwar_Command_MIN, 0}
#define armwar_SpannedCommandSequence_init_default {{{NULL}, NULL}}
#define armwar_ArmCommand_init_default           {false, armwar_TimedCommand_init_default, false, armwar_TimedCommandSequence_init_default, false, armwar_SpannedCommand_init_default, false, armwar_SpannedCommandSequence_init_default, false, armwar_StatedCommand_init_default}
#define armwar_CommandResponse_init_zero         {0, {{NULL}, NULL}}
#define armwar_ArmState_init_zero                {0, 0, 0, 0, 0}
#define armwar_ArmAvailability_init_zero         {0, false, armwar_ArmState_init_zero}
#define armwar_Connect_init_zero                 {0, false, 0}
#define armwar_Disconnect_init_zero              {0}
#define armwar_TimedCommand_init_zero            {_armwar_Command_MIN, 0}
#define armwar_TimedCommandSequence_init_zero    {{{NULL}, NULL}}
#define armwar_StatedCommand_init_zero           {_armwar_Command_MIN, 0}
#define armwar_SpannedCommand_init_zero          {_armwar_Command_MIN, 0}
#define armwar_SpannedCommandSequence_init_zero  {{{NULL}, NULL}}
#define armwar_ArmCommand_init_zero              {false, armwar_TimedCommand_init_zero, false, armwar_TimedCommandSequence_init_zero, false, armwar_SpannedCommand_init_zero, false, armwar_SpannedCommandSequence_init_zero, false, armwar_StatedCommand_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define armwar_CommandResponse_success_tag       1
#define armwar_CommandResponse_message_tag       2
#define armwar_ArmState_x_tag                    1
#define armwar_ArmState_y_tag                    2
#define armwar_ArmState_z_tag                    3
#define armwar_ArmState_roll_tag                 4
#define armwar_ArmState_is_grabbing_tag          5
#define armwar_ArmAvailability_available_tag     1
#define armwar_ArmAvailability_state_tag         2
#define armwar_Connect_connect_tag               1
#define armwar_Connect_timeout_tag               2
#define armwar_Disconnect_disconnect_tag         1
#define armwar_TimedCommand_command_tag          1
#define armwar_TimedCommand_duration_tag         2
#define armwar_TimedCommandSequence_command_tag  1
#define armwar_StatedCommand_command_tag         1
#define armwar_StatedCommand_start_tag           2
#define armwar_SpannedCommand_command_tag        1
#define armwar_SpannedCommand_span_tag           2
#define armwar_SpannedCommandSequence_command_tag 1
#define armwar_ArmCommand_timed_command_tag      1
#define armwar_ArmCommand_timed_sequence_tag     2
#define armwar_ArmCommand_spanned_command_tag    3
#define armwar_ArmCommand_spanned_sequence_tag   4
#define armwar_ArmCommand_stated_command_tag     5

/* Struct field encoding specification for nanopb */
#define armwar_CommandResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     success,           1) \
X(a, CALLBACK, SINGULAR, STRING,   message,           2)
#define armwar_CommandResponse_CALLBACK pb_default_field_callback
#define armwar_CommandResponse_DEFAULT NULL

#define armwar_ArmState_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    x,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    z,                 3) \
X(a, STATIC,   SINGULAR, FLOAT,    roll,              4) \
X(a, STATIC,   SINGULAR, BOOL,     is_grabbing,       5)
#define armwar_ArmState_CALLBACK NULL
#define armwar_ArmState_DEFAULT NULL

#define armwar_ArmAvailability_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     available,         1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  state,             2)
#define armwar_ArmAvailability_CALLBACK NULL
#define armwar_ArmAvailability_DEFAULT NULL
#define armwar_ArmAvailability_state_MSGTYPE armwar_ArmState

#define armwar_Connect_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     connect,           1) \
X(a, STATIC,   OPTIONAL, INT32,    timeout,           2)
#define armwar_Connect_CALLBACK NULL
#define armwar_Connect_DEFAULT NULL

#define armwar_Disconnect_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     disconnect,        1)
#define armwar_Disconnect_CALLBACK NULL
#define armwar_Disconnect_DEFAULT NULL

#define armwar_TimedCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    command,           1) \
X(a, STATIC,   SINGULAR, INT32,    duration,          2)
#define armwar_TimedCommand_CALLBACK NULL
#define armwar_TimedCommand_DEFAULT NULL

#define armwar_TimedCommandSequence_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  command,           1)
#define armwar_TimedCommandSequence_CALLBACK pb_default_field_callback
#define armwar_TimedCommandSequence_DEFAULT NULL
#define armwar_TimedCommandSequence_command_MSGTYPE armwar_TimedCommand

#define armwar_StatedCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    command,           1) \
X(a, STATIC,   SINGULAR, BOOL,     start,             2)
#define armwar_StatedCommand_CALLBACK NULL
#define armwar_StatedCommand_DEFAULT NULL

#define armwar_SpannedCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    command,           1) \
X(a, STATIC,   SINGULAR, FLOAT,    span,              2)
#define armwar_SpannedCommand_CALLBACK NULL
#define armwar_SpannedCommand_DEFAULT NULL

#define armwar_SpannedCommandSequence_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  command,           1)
#define armwar_SpannedCommandSequence_CALLBACK pb_default_field_callback
#define armwar_SpannedCommandSequence_DEFAULT NULL
#define armwar_SpannedCommandSequence_command_MSGTYPE armwar_SpannedCommand

#define armwar_ArmCommand_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  timed_command,     1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  timed_sequence,    2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  spanned_command,   3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  spanned_sequence,   4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stated_command,    5)
#define armwar_ArmCommand_CALLBACK NULL
#define armwar_ArmCommand_DEFAULT NULL
#define armwar_ArmCommand_timed_command_MSGTYPE armwar_TimedCommand
#define armwar_ArmCommand_timed_sequence_MSGTYPE armwar_TimedCommandSequence
#define armwar_ArmCommand_spanned_command_MSGTYPE armwar_SpannedCommand
#define armwar_ArmCommand_spanned_sequence_MSGTYPE armwar_SpannedCommandSequence
#define armwar_ArmCommand_stated_command_MSGTYPE armwar_StatedCommand

extern const pb_msgdesc_t armwar_CommandResponse_msg;
extern const pb_msgdesc_t armwar_ArmState_msg;
extern const pb_msgdesc_t armwar_ArmAvailability_msg;
extern const pb_msgdesc_t armwar_Connect_msg;
extern const pb_msgdesc_t armwar_Disconnect_msg;
extern const pb_msgdesc_t armwar_TimedCommand_msg;
extern const pb_msgdesc_t armwar_TimedCommandSequence_msg;
extern const pb_msgdesc_t armwar_StatedCommand_msg;
extern const pb_msgdesc_t armwar_SpannedCommand_msg;
extern const pb_msgdesc_t armwar_SpannedCommandSequence_msg;
extern const pb_msgdesc_t armwar_ArmCommand_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define armwar_CommandResponse_fields &armwar_CommandResponse_msg
#define armwar_ArmState_fields &armwar_ArmState_msg
#define armwar_ArmAvailability_fields &armwar_ArmAvailability_msg
#define armwar_Connect_fields &armwar_Connect_msg
#define armwar_Disconnect_fields &armwar_Disconnect_msg
#define armwar_TimedCommand_fields &armwar_TimedCommand_msg
#define armwar_TimedCommandSequence_fields &armwar_TimedCommandSequence_msg
#define armwar_StatedCommand_fields &armwar_StatedCommand_msg
#define armwar_SpannedCommand_fields &armwar_SpannedCommand_msg
#define armwar_SpannedCommandSequence_fields &armwar_SpannedCommandSequence_msg
#define armwar_ArmCommand_fields &armwar_ArmCommand_msg

/* Maximum encoded size of messages (where known) */
/* armwar_CommandResponse_size depends on runtime parameters */
/* armwar_TimedCommandSequence_size depends on runtime parameters */
/* armwar_SpannedCommandSequence_size depends on runtime parameters */
/* armwar_ArmCommand_size depends on runtime parameters */
#define armwar_ArmAvailability_size              26
#define armwar_ArmState_size                     22
#define armwar_Connect_size                      13
#define armwar_Disconnect_size                   2
#define armwar_SpannedCommand_size               7
#define armwar_StatedCommand_size                4
#define armwar_TimedCommand_size                 13

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
